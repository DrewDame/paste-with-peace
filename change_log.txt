### [2025-05-15] features branch -> main branch
- UPDATED: paste_with_peace/scanner.py
    calculate_entropy(s: str) -> float:
    is_potential_secret(text: str) -> Tuple[bool, str]:
- UPDATED: tests/test_scanner.py
    14 tests implemented and passed
- Implemented regexes for many common keys
- Added Shannon entropy fallback if no pattern matches
- Confirmed 14 tests. Most tests that initially failed were written wrong. 
    generic_api_key condition in scanner.py was adjusted after test failure, successfully
- main branch was merged to state of features branch and pushed to remote repo

### [2025-05-15] features branch -> main branch
- UPDATED: paste_with_peace/monitor.py
    start_monitor(interval: float = 0.5):
    scan_clipboard_text(text: str) -> bool:
- UPDATED: paste_with_peace/notifier.py
    alert_secret_detected(label: str, _text: str):
- UPDATED: tests/test_monitor.py
    13 tests implemented and passed
- Goal: Monitor clipboard for new content and scan it using scanner.py
- Plan: Poll clipboard every 0.5s, detect new text, trigger alert via notifier.py
- Confirmed 13 tests. All tests passed on first try after minor syntax corrections
- main branch was merged to state of features branch and pushed to remote repo

### [2025-05-15] features branch -> main branch
- UPDATED: paste_with_peace/notifier.py
    alert_secret_detected(label: str, _text: str):
- UPDATED: main.py
    added function call to start_monitor() from paste_with_peace/monitor.py
- Goal: Improve notifier message and start the process from main.py
- Plan: Change notifier.py and add a function call into main.py
- Confirmed function with manual testing by running main.py and copying an
  example key to my clipboard
- main branch was merged to state of features branch and pushed to remote repo

### [2025-05-15] features branch -> main branch
- UPDATED: paste_with_peace/notifier.py
    def log_detection(label: str, text: str, log_file="logs/detection_log.txt", redact_mode="masked"):
    alert_secret_detected(label: str, _text: str):
- Goal: Add functionality to create logs in logs/detection_log.txt every time an alert is sent
- Plan: Give multiple options that can be configured later to ensure the keys themselves are not saved
- Confirmed function with manual testing by running main.py and copying an
  example key to my clipboard
- main branch was merged to state of features branch and pushed to remote repo

### [2025-05-15] features branch -> main branch
- UPDATED: config.json
- UPDATED: paste_with_peace/notifier.py
    log_detection(label: str, text: str, log_file="logs/detection_log.txt", redact_mode="masked"):
- UPDATED: paste_with_peace/config.py
    load_config(path="config.json"):
- Goal: Add the ability to change settings
- Plan: Change settings with config.json and load with config.py. There
  is currently no UI to change contents of config.json
- Confirmed function with manual testing by running main.py and copying an
  example key to my clipboard, with config.json "logging_enabled" set
  first to true, then to false. logs/detection_log.txt was only 
  updated when "logging_enabled" was set to true
- main branch was merged to state of features branch and pushed to remote repo

### [2025-05-15] features branch -> main branch
- UPDATED: config.json
- UPDATED: paste_with_peace/tray.py
    create_icon():
    run_tray(on_quit_callback=None):
- UPDATED: paste_with_peace/config.py
- UPDATED: main.py
    added threading so that the clipboard tracker and system tray icon
    can run simultaneously
- Goal: Add the ability to quit via system tray icon
- Plan: Add tray icon functionality to tray.py and call it in main.py. Add user
  ability/inability to quit to the config settings
- Confirmed function with manual testing by running main.py with
  config.json "allow_user_quit" first to false, then to true. "Quit" option
  was only visible when config allowed it to be
- main branch was merged to state of features branch and pushed to remote repo

### [2025-05-16] features branch -> main branch
- UPDATED: build
- UPDATED dist
- Goal: Create PasteWithPeace.exe so that users can download the exe and run
- Plan: Use PyInstaller to create exe file
- Confirmed function by opening the exe file on my own machine and
  verifying that it was running in the background
- main branch was merged to state of features branch and pushed to remote repo

### [2025-05-16] features branch -> main branch
- UPDATED: paste_with_peace/intercept/slack_guard.py
    is_slack_active_window() -> bool:
    clipboard_has_secret() -> tuple[bool, str, str]:
    block_enter_temporarily():
    unblock_enter():
    unblock_enter_after_delay(delay=2.0):
    on_v(e):
    run_slack_guard():
- UPDATED: main.py
    now runs run_slack_guard() from slack_guard.py
Goal: Prevent Slack user from sending sensitive information they just pasted
Plan: Detect when user uses ctrl+v to paste sensitive information,
    then block their enter key for 2 seconds
- Confirmed function by pasting example api key into Slack message box and
  being unable to hit enter for 2 seconds after
- main branch was merged to state of features branch and pushed to remote repo